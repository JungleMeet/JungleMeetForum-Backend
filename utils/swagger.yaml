openapi :  '3.0.0'
info : 
  title :  Jungle Meet Apis Documentation
  version :  '1.0.0'
  description :  This is the API documentation for JungleMeet Queuing
servers :
  - url :  http://localhost:3000/v1  
    description :  Local Server
components:
  schemas:
    User:
      type: object
      required:
        - name
        - password
        - email
      properties:
        _id:
          type: string
          description: The Auto-generated id of a post
          example: 6332d81195b55eda2a612059
        name:
          type: string
          description: name of the user
          example: Rachel
        password:
          type: string
          description: password of the user
          example: abcd1234
        email:
          type: string
          description: email of the user
          example: example@example.com
        avatar:
          type: string
          description: avatar of the user
          example: xxxxx
        bgImg:
          type: string
          description: background image of the user profile
          example: xxxxx
        role:
          type: string
          description: role of the user
          example: admin
        follower:
          type: array
          items:
            type: string
          description: follower of the user
          example: [6332d81195b55eda2a612058, 6332d81195b55eda2a612057]
        following:
          type: array
          items:
            type: string
          description: the following user of the user
          example: [6332d81195b55eda2a612053, 6332d81195b55eda2a612052]
        followingPost:
          type: array
          items:
            type: string
          description: followingPost of the user
          example: [6332d81195b55eda2a612153, 6332d81195b55eda2a612058, 6332d81195b55eda2a602057]
        createdAt:
          type: string
          description: the time of creating the user
          example: 2022-09-27T11:01:37.487Z
        updatedAt:
          type: string
          description: the time of updating the user
          example: 2022-10-22T12:16:32.731Z
    Post:
      type: object
      required:
        - title
        - content
        - bgImg
        - author
      properties:
        _id:
          type: string
          description: The Auto-generated id of a post
          example: 63338ae4d11e553b55138c9e
        title:
          type: string
          description: title of the post
          example: abd
        content:
          type: string
          description: content of the post
          example: 1234
        bgImg:
          type: string
          description: background image of the the post
          example: xxxx
        hashtag:
          type: string
          description: tag post
          example: horror
        author:
          type: string
          description: author of the post
          example: 6332d81195b55eda2a612059
        visible:
          type: boolean
          description: status of deleting the post
          example: true
        resourceId:
          type: string
          description: resource id of the post
          example: xxxxxx
        viewCount:
          type: number
          description: the number of the post views
          example: 11
        postType:
          type: string
          description: the type of the post
          example: usePost
        follower:
          type: array
          items:
            type: string
          description: follower of the user
          example: [6332d81195b55eda2a612058, 6332d81195b55eda2a612057]
        like:
          type: array
          items:
            type: string
          description: the userId of users who like post
          example: [6332d81195b55eda2a612058, 6332d81195b55eda2a612057]
        createdAt:
          type: string
          description: the time of creating the post
          example: 2022-10-03T01:33:24.275Z
        updatedAt:
          type: string
          description: the time of updating the post
          example: 2022-09-30T06:01:26.183Z
    Comment:
      type: object
      required:
        - content
        - authorID
      properties:
        _id:
          type: string
          description: The Auto-generated id of a post
          example: 6333bac93edc0fe86c036b16
        content:
          type: string
          description: text of the user
          example: I liked your post!
        authorID:
          type: string
          description: author ID of the user
          example: 6332a4603e60205bb0908b28
        visible:
          type: boolean
          description: visible of the user
          example: true
        mentionedUserId:
          type: array
          items:
            type: string
          description: '[]'
        postId:
          type: array
          items:
            type: string
          description: the post Id of the user
          example: 6333b653dbf4653be026279b
        parentCommentId:
          type: array
          items:
            type: string
          description: parent Comment Id of the user
          example:
        like:
          type: array
          items:
            type: string
          description: '0'
        createdAt:
          type: string
          description: the time of creating the user
          example: 2022-09-28T03:08:57.470Z
        updatedAt:
          type: string
          description: the time of updating the user
          example: 2022-09-28T03:08:57.470Z
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
paths :
    /users:
      put:
        tags:
          - user
        summary: Update user by ID
        description: Update an existing user by Id
        operationId: updateUser
        security:
          - cookieAuth: []
        requestBody:
          description:
            Add a new user
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                  - email
                  - avatar
                  - bgImg
                properties:
                  name:
                    type: string
                    description: name of the user
                    example: Rachel
                  email:
                    type: string
                    description: email of the user
                    example: example@example.com
                  avatar:
                    type: string
                    description: avatar of the user
                    example: xxxxx
                  bgImg:
                    type: string
                    description: background image of the user profile
                    example: xxxxx
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '404':
            description: Not Found
      patch:
        tags:
          - user
        summary: Update user by ID
        description: Update an existing user by Id
        operationId: updateUser
        security:
          - cookieAuth: []
        requestBody:
          description:
            Add a new user
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                  - email
                  - avatar
                  - bgImg
                properties:
                  name:
                    type: string
                    description: name of the user
                    example: Rachel
                  email:
                    type: string
                    description: email of the user
                    example: example@example.com
                  avatar:
                    type: string
                    description: avatar of the user
                    example: xxxxx
                  bgImg:
                    type: string
                    description: background image of the user profile
                    example: xxxxx
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '404':
            description: Not Found
      post:
        tags:
          - user
        summary: Add a new user
        description: Return created user
        operationId: createUser
        requestBody:
          description:
            Add a new user
          content:
            application/json:
              schema:
                type: object
                required:
                  - name
                  - password
                  - email
                properties:
                  name:
                    type: string
                    description: name of the user
                    example: Rachel
                  password:
                    type: string
                    description: password of the user
                    example: abcd1234
                  email:
                    type: string
                    description: email of the user
                    example: example@example.com
                  avatar:
                    type: string
                    description: avatar of the user
                    example: xxxxx
                  bgImg:
                    type: string
                    description: background image of the user profile
                    example: xxxxx
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Bad request
      get:
        tags:
          - user
        summary: Get all users
        description: Return all users
        operationId: getAllUsers
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '404':
            description: Not Found
    /users/{id}:
      get:
        tags:
          - user
        summary: Find user by id
        description: Return a single user
        operationId: getUserById
        parameters:
          - name: id
            required: true
            in: path
            description: ID of user to return
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '404':
            description: User not found
    /users/login:
        post:
          tags:
            - user
          summary: User Log in and set cookie
          operationId: userLogIn
          requestBody:
            description:
              User log in
            content:
              application/json:
                schema:
                  type: object
                  required:
                    - email
                    - password
                  properties:
                    password:
                      type: string
                      description: password of the user
                      example: abcd1234
                    email:
                      type: string
                      description: email of the user
                      example: example@example.com
          responses:
            '200':
              description: successful operation
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Successfully logged in'
            '401':
              description: login failed
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
                        example: 'Wrong password, try again'

            '404':
              description: Bad request
    /users/following:
      put:
        tags:
          - user
        summary: Follow or unfollow a user
        description: Follow or unfollow a user
        operationId: toggleFollowing
        security:
          - cookieAuth: []
        requestBody:
          description:
            Follow or unfollow a user
          content:
            application/json:
              schema:
                type: object
                required:
                  - following
                properties:
                  following:
                    type: string
                    description: id of the following/unfollowing user
                    example: 6332dxxxxxb55eda2a612057
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Bad request
    /users/reset:
      post:
        tags:
          - user
        summary: Reset password
        description: Reset password
        operationId: resetPassword
        security:
          - cookieAuth: []
        requestBody:
          description:
            Follow or unfollow a user
          content:
            application/json:
              schema:
                type: object
                required:
                    - newPassword
                    - oldPassword
                properties:
                    newPassword:
                      type: string
                      description:  new password of the user
                      example: abcd5678
                    oldPassword:
                      type: string
                      description: old password of the user
                      example: abcd1234
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400':
            description: Bad request
    /posts:
      get:
        tags:
          - post
        summary: get all posts
        description: get all posts
        operationId: getPosts
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
          '404':
            description: Not found
    /posts/post:
      post:
        tags:
          - post
        summary: Add a new post
        description: Return created post
        operationId: createPost
        security:
          - cookieAuth: []
        requestBody:
          description:
            Add a new post
          content:
            application/json:
              schema:
                type: object
                required:
                  - title
                  - content
                properties:
                  title:
                    type: string
                    description: title of the post
                    example: abd
                  content:
                    type: string
                    description: content of the post
                    example: 1234
                  bgImg:
                    type: string
                    description: background image of the the post
                    example: xxxx
                  hashtag:
                    type: string
                    description: tag post
                    example: horror

        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
          '404':
            description: Not Found
          '400':
            description: Title and content cannot be empty!
    /posts/{postId}:
      patch:
        tags:
          - post
        summary: Patch a post by id
        description: Patch a post
        operationId: patchPost
        security:
          - cookieAuth: []
        parameters:
          - name: postId
            required: true
            in: path
            description: the id of the post
            schema:
              type: string
        requestBody:
          description:
            patch a post by id
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: title of the post
                    example: abd
                  content:
                    type: string
                    description: content of the post
                    example: 1234
                  bgImg:
                    type: string
                    description: background image of the the post
                    example: xxxx
                  hashtag:
                    type: string
                    description: tag post
                    example: horror

        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
          '401':
            description: Only author can update post!
          '400':
            description: Title and content cannot be empty!
          '404':
            description: Not found
      put:
        tags:
          - post
        summary: Update an existing post
        description: Update an existing post by Id
        operationId: updatePost
        security:
          - cookieAuth: []
        parameters:
          - name: postId
            in: path
            description: ID of post to return
            schema:
              type: string
            required: true
        requestBody:
          description:
            Update an existent post on the forum
          content:
            application/json:
              schema:
                type: object
                required:
                  - title
                  - content
                properties:
                  title:
                    type: string
                    description: title of the post
                    example: Matrix
                  content:
                    type: string
                    description: content of the post
                    example: Great movie!
                  bgImg:
                    type: string
                    description: background image of the the post
                    example: xxxx
                  hashtag:
                    type: string
                    description: tag post
                    example: Sci-fi
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
          '400':
            description: Invalid request.
            content:
              application/json:
                examples:
                  Error:
                    description: Invalid request.
                    value:
                      message: Title and content cannot be empty!
          '401':
            description: Unauthorized author.
            content:
              application/json:
                examples:
                  Error:
                    description: Unauthorized author.
                    value:
                      message: Only author can update the post!
          '404':
            description: Not Found.
    /posts/movie:
      post:
        tags:
          - post
        summary: create a movie post
        description: create a movie post
        operationId: createMoviePost
        requestBody:
          description:
            create a movie post
          content:
            application/json:
              schema:
                type: object
                properties:
                  resourceId:
                    type: string
                    description: id of the external resource
                    example: xxxx
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
          '400':
            description: 'resourceId cannot be empty'
          '404':
            description: Not found
    /posts/:
      get:
        tags:
          - post
        summary: Get post according to querry
        description: displayNumber in querry controls the number of display, return all if not set 
                     sort by views/create time if  query.sortBy is 'view' or 'createdAt' 
        operationId: getPosts
        parameters:
            - name: sortBy
              required: false
              in: query
              description: sortBy views or createdAt
              schema: 
                type: string
            - name: displayNumber
              required: false
              in: query
              description: the number of display
              schema: 
                type: integer
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Post'
    /posts/like/{postId}:
      patch:
        tags:
          - post
        summary: Like a post 
        description: Post like +1
        operationId: likePost
        parameters:
          - name: postId
            required: true
            in: path
            description: ID of post
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: 
                    type: string
                    description: The ID of the user
        responses:
          '200':
            description: successful operation
    /posts/unlike/{postId}:
      patch:
        tags:
          - post
        summary: Unlike a post 
        description: Post like -1
        operationId: unlikePost
        parameters:
          - name: postId
            required: true
            in: path
            description: ID of post
            schema:
              type: string
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId: 
                    type: string
                    description: The ID of the user
        responses:
          '200':
            description: successful operation
    /posts/admin/{postId}:
      patch:
        tags:
          - post
        summary: Delete a post 
        description: Set post to invisible
        operationId: deletePost
        parameters:
          - name: postId
            required: true
            in: path
            description: ID of post
            schema:
              type: string
        responses:
          '200':
            description: successful operation
    /posts/{postId}/likes/:
      get:
        tags:
          - post
        summary: Get all likes of the post
        description: Return the array of the user who like the post
        operationId: getAllLikes
        parameters:
          - name: postId
            required: true
            in: path
            description: ID of post
            schema:
              type: string
        responses:
          '200':
            description: successful operation
    /posts/{postId}/likes/{userId}:
      get:
        tags:
          - post
        summary: Check if the user like the post
        description: Return true or false
        operationId: checkLike
        parameters:
          - name: postId
            required: true
            in: path
            description: ID of post
            schema:
              type: string
          - name: userId
            required: true
            in: path
            description: ID of user to check
            schema:
              type: string
        responses:
          '200': 
            description: successful operation
    
    /comments:
      get:
        tags:
          - comment
        summary: get all comments
        description: Return all comments
        operationId: getAllComments
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Comment'
          '404':
            description: Comment not found
      post:
        tags:
          - comment
        summary: Create a new comment
        description: Return created comment
        operationId: createComment
        security:
          - cookieAuth: []
        requestBody:
          description:
            Create a new comment
          content:
            application/json:
              schema:
                type: object
                required:
                  - content
                  - author
                  - postId
                properties:
                  content:
                    type: string
                    description: content of the comment
                    example: I like your post!
                  author:
                    type: string
                    description: author ID of the comment
                    example: afdgbf4557
                  postId:
                    type: string
                    description: ID of the post
                    example: aht123456
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Comment'
          '404':
            description: Not Found
    /comments/{commentId}:
      get:
        tags:
          - comment
        summary: Find comment by id
        description: Return a single comment
        operationId: getCommentById
        parameters:
          - name: commentId
            required: true
            in: path
            description: ID of comment to return
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Comment'
          '404':
            description: Comment not found
      put:
        tags:
          - comment
        summary: Update a comment
        description: Return updated comment
        operationId: updateComment
        security:
          - cookieAuth: []
        parameters:
          - name: commentId
            required: true
            in: path
            description: Id of the updated comment
            schema:
              type: string
        requestBody:
          description:
            Update a comment
          content:
            application/json:
              schema:
                type: object
                required:
                  - text
                  - mentionUserId
                properties:
                  title:
                    type: string
                    description: content of the comment
                    example: abd
                  mentionUserId:
                    type: string
                    description: ID of the post
                    example: 123456
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Comment'
          '404':
            description: Not Found
    /comments/admin/{commentId}:
      put:
        tags:
          - comment
        summary: Delete comment by id
        description: Delete comment by id
        operationId: deleteCommentById
        security:
          - cookieAuth: []
        parameters:
          - name: commentId
            required: true
            in: path
            description: This api is used for admin to delete comment by ID
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Comment'
          '404':
            description: Comment not found
    /comments/like/{commentId}:
      patch:
        tags:
          - comment
        summary: Toggle like/unlike on a comment
        description: toggle like/unlike on a comment
        operationId: toggleLikeOnComment
        security:
          - cookieAuth: []
        parameters:
          - name: commentId
            required: true
            in: path
            description: Id of the like/unlike comment
            schema:
              type: string
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Comment'
          '404':
            description: Not Found
